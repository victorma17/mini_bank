<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="example.micronaut.TransactionControllerTest" tests="3" skipped="0" failures="0" errors="0" timestamp="2023-08-10T20:31:20" hostname="Victors-MacBook-Air.local" time="0.087">
  <properties/>
  <testcase name="supplyAnInvalidOrderTriggersValidationFailure" classname="example.micronaut.TransactionControllerTest" time="0.018"/>
  <testcase name="testFindNonExistingTransactionReturns404" classname="example.micronaut.TransactionControllerTest" time="0.008"/>
  <testcase name="testTransactionCrudOperations" classname="example.micronaut.TransactionControllerTest" time="0.06"/>
  <system-out><![CDATA[22:31:20.514 [Test worker] INFO  i.m.c.DefaultApplicationContext$RuntimeConfiguredEnvironment - Established active environments: [test]
22:31:20.527 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Starting...
22:31:20.528 [Test worker] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-3 - Added connection conn11: url=jdbc:h2:mem:default user=SA
22:31:20.528 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Start completed.
22:31:20.533 [Test worker] WARN  org.hibernate.orm.incubating - HHH90006001: Encountered incubating setting [hibernate.id.db_structure_naming_strategy].  See javadoc on corresponding `org.hibernate.cfg.AvailableSettings` constant for details.
22:31:20.534 [Test worker] WARN  org.hibernate.orm.incubating - HHH90006001: Encountered incubating setting [hibernate.id.db_structure_naming_strategy].  See javadoc on corresponding `org.hibernate.cfg.AvailableSettings` constant for details.
22:31:20.534 [Test worker] WARN  org.hibernate.orm.incubating - HHH90006001: Encountered incubating setting [hibernate.id.db_structure_naming_strategy].  See javadoc on corresponding `org.hibernate.cfg.AvailableSettings` constant for details.
22:31:20.534 [Test worker] INFO  o.h.b.i.BytecodeProviderInitiator - HHH000021: Bytecode provider name : bytebuddy
Hibernate: drop table if exists transaction cascade 
Hibernate: drop table if exists user_bank cascade 
Hibernate: drop table if exists wallet cascade 
Hibernate: drop sequence if exists hibernate_sequence
Hibernate: create sequence hibernate_sequence start with 1 increment by 1
Hibernate: create table transaction (quantity bigint not null, trx_id bigint not null, wallet_destination bigint not null, wallet_source bigint not null, primary key (trx_id))
Hibernate: create table user_bank (user_id bigint not null, user_name varchar(255) not null unique, primary key (user_id))
Hibernate: create table wallet (amount bigint, owner_id bigint not null, wallet_id bigint not null, wallet_name varchar(255) not null unique, primary key (wallet_id))
Hibernate: select t1_0.trx_id,t1_0.quantity,t1_0.wallet_destination,t1_0.wallet_source from transaction t1_0 where t1_0.trx_id=?
Hibernate: select next value for hibernate_sequence
Hibernate: update wallet set amount=(cast(? as bigint)+amount) where wallet_id=?
Hibernate: update wallet set amount=(amount-cast(? as bigint)) where wallet_id=?
Hibernate: insert into transaction (quantity,wallet_destination,wallet_source,trx_id) values (?,?,?,?)
Hibernate: select next value for hibernate_sequence
Hibernate: update wallet set amount=(cast(? as bigint)+amount) where wallet_id=?
Hibernate: update wallet set amount=(amount-cast(? as bigint)) where wallet_id=?
Hibernate: insert into transaction (quantity,wallet_destination,wallet_source,trx_id) values (?,?,?,?)
Hibernate: select t1_0.trx_id,t1_0.quantity,t1_0.wallet_destination,t1_0.wallet_source from transaction t1_0 where t1_0.trx_id=?
Hibernate: select t1_0.trx_id,t1_0.quantity,t1_0.wallet_destination,t1_0.wallet_source from transaction t1_0 fetch first ? rows only
Hibernate: select t1_0.trx_id,t1_0.quantity,t1_0.wallet_destination,t1_0.wallet_source from transaction t1_0 fetch first ? rows only
Hibernate: select t1_0.trx_id,t1_0.quantity,t1_0.wallet_destination,t1_0.wallet_source from transaction t1_0 fetch first ? rows only
Hibernate: select t1_0.trx_id,t1_0.quantity,t1_0.wallet_destination,t1_0.wallet_source from transaction t1_0 order by t1_0.wallet_source desc fetch first ? rows only
Hibernate: select t1_0.trx_id,t1_0.quantity,t1_0.wallet_destination,t1_0.wallet_source from transaction t1_0 offset ? rows fetch first ? rows only
Hibernate: drop table if exists transaction cascade 
Hibernate: drop table if exists user_bank cascade 
Hibernate: drop table if exists wallet cascade 
Hibernate: drop sequence if exists hibernate_sequence
22:31:20.673 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Shutdown initiated...
22:31:20.676 [Test worker] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Shutdown completed.
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
